package Life25::Site;
use strict;
use warnings;
use base 'Mojolicious::Controller';
use utf8;
use Data::Dumper;
use Life25::DB;

sub register
{	
		my $self = shift;
		
		my $user = User->new;

		if($self->req->method eq 'POST')
		{
			$user->fill($self->req->body_params->to_hash);
			
			$user->extra('last_ip', $self->tx->remote_address);
			
			$user->save()

		}
		
		$self->stash('user', $user);
		
		$self->render();
}

sub login{	
		my $self = shift;
		
		if($self->req->method eq 'POST')
		{
			my $user = User->new;
			
			if($user->do_login($self->req->body_params->param('login'),
								$self->req->body_params->param('password')))
			{
				my $s = $self->app->session;
				$s->data('auth', 1);
				$s->data('login', $user->login);
				$s->data('user', $user);

				$s->flush;
				$self->redirect_to('/');
			}
							
			$self->stash('user', $user);
		}		
		
		$self->render;
}

sub logout{
		my $self = shift;
		if($self->app->session->data('auth'))
		{
			$self->app->session->expire;
			$self->app->session->flush;
		}
		$self->redirect_to('/');
}

sub new_topic {
		my $self = shift;
		
		my $topic = Topic->new;
		
		$topic->db->begin_work;
		
		$topic->fill($self->req->body_params->to_hash); 
		$topic->user($self->app->session->data('user'));
		
		$topic->save;
		
		my @errors = ();
		#Only for users logged in
		if ($topic->error)
		{
			push @errors, $topic->errors;			
		}
		else
		{
			my $message = Message->new;
			
			$message->topic($topic);
			$message->user($topic->user);
			$message->body_raw($self->req->body_params->param('message'));
			$message->extra('ip',$self->tx->remote_address);
			$message->save;
			
			if($message->error)
			{
				push @errors, $message->errors;
			}
		}
		
		if(@errors)
		{
			#utf8::encode($errors);
			$self->app->session->data('errors' =>\@errors);
			$self->app->session->flush;
			
			$topic->db->rollback;
		}
		else
		{
			$topic->db->commit;
			
		}
			
		$self->redirect_to('/');
		
}
sub show {
		my $self = shift;
		$self->render(template => 'site/index', details => "<pre><code> @{[ Dumper $self->app->session->data ]}</code></pre>", message=>0)
}

sub index{	
		my $self = shift;
		my $offset = $self->stash('tid') || 1;
		
		my $topics = Topic::Manager->get_topics(
						limit => 10,
						offset => ($offset -1) * 10,
						sort_by => 'id desc'
					);
		$DB::single = 1;			
		$self->render(details => "Mojo Test Forum", topics => $topics);
}

sub user {
		my $self = shift;
		$self->render();
}
	
sub r_test{
		my $self = shift;
		my $ofs = int rand(14);#int($self->stash('id')) || 0;
		my $users = User::Manager->get_users
  (
#    query =>
#    [
#      category_id => [ 5, 7, 22 ],
#      status      => 'active',
#      start_date  => { lt => '15/12/2005 6:30 p.m.' },
#      name        => { like => [ '%foo%', '%bar%' ] },
#    ],
#    sort_by => 'category_id, start_date DESC',
    limit   => 10,
    offset  => $ofs * 10
  );
  
		#$self->stash('users') = $users;
		$self->render(	message => "R_TEST",
						details => '',
						users => $users,
						template => 'site/index');
}
 
1;

################################################################################
package Site::Pager;
use base 'Mojo::Base';
use POSIX qw(ceil floor);

__PACKAGE__->attr( count => 10);	
__PACKAGE__->attr( current => 1);	
__PACKAGE__->attr( len => 3);
__PACKAGE__->attr( page_len => 10);		
__PACKAGE__->attr( space => '...');	

sub new {
		
		my $class = shift;
		
		my $self = $class->SUPER::new(@_);
		
		my %params;
		
		if (ref $_[0])
		{
			%params = %{ $_[0] };
		}
		else
		{
			%params =  @_ ;
		}		
		
		for my $par (keys %params)
		{
			$self->$par($params{$par}) if $self->can($par);
		}
				
		return $self;
}

sub paginate {
		my $self = shift;
		
		my $len = $self->len || 1;
		my $first = 1;
		my $count = ceil($self->count/$self->page_len);
		my $last = $count ;
		my $current = $self->current;
		my $space = $self->space;
				
		my %uniq = ();
		my $mid = ceil($len / 2);
		
		for my $cur ($first  .. $first + $len -1 )
		{
			$uniq{$cur}++ if $cur > 0;
		}

		for my $cur ($current - $mid .. $current + $mid)
		{
			$uniq{$cur}++ if $cur > 0 && $cur < $last;
		}
		
		for my $cur ($last - $len + 1  .. $last)
		{
			$uniq{$cur}++ if $cur <= $last;
		}
		
		my @res = sort { int($a) <=> int($b) } keys %uniq;
		my @ans = ();
		
		while(@res)
		{
			my $tmp = shift @res;
			push @ans, $space if @ans && $ans[-1] +1 != $tmp;
			
			push @ans, $tmp;
		}
		
		my $list = join " -- ", @ans;
		$list .= " ------ last = $last";
		
		return $list; 
}

1;
################################################################################
package Mii;
use Mojo::Base 'Mojolicious::Plugin';
use Mojo::ByteStream 'b';
use Mojo::Util 'xml_escape';
use Mojo::Loader;
use Data::Dumper::HTML qw(dumper_html);

has _owner => sub { undef };

sub register {
	my ($self, $app) = @_;

	$app->helper(
		widget => sub {

		  $self->_owner(shift);		  
		  my $name = shift;			  
		  my $params = $self->_init($self, name => $name, @_);
		  
		  return b( $self->_run($params) );
		}
	);
}

sub _init {
  my ($self, $name) = (shift, shift);
 
  # Content
  my $cb = defined $_[-1] && ref($_[-1]) eq 'CODE' ? pop @_ : undef;
  my $content = pop if @_ % 2;
  $content = xml_escape $content if defined $content;
  
   # Attributes
   my %attrs = @_;
    
	# Block
	my $block;
	if ($cb || defined $content) {
		$block = $cb ? $cb->() : $content;
	}
	my $params = {content => $block, widget => $name, params => \%attrs}; 

	return \$params;
}

sub _run {
	my $self = shift;
	#die "Subclass '" . __PACKAGE__ . "' not implement '_run' method.";
	my $params = shift;
	
	return dumper_html $params;
}

1;
################################################################################
package Mii::Widget;
use Mojo::Base 'Mii';

1;
################################################################################
package Mii::LinkPager;
use Mojo::Base 'Mojolicious::Plugin';

1;
